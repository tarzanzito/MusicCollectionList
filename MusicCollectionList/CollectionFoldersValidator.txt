
using System.Xml.Linq;

namespace MusicCollectionList
{
    internal class CollectionFoldersValidator
    {
        private string _data;
        private const char COUNTRY_OPEN_CHAR = '{';
        private const char COUNTRY_CLOSE_CHAR = '}';
        private const char YEAR_OPEN_CHAR = '{';
        private const char YEAR_CLOSE_CHAR = '}';
        private const char ALBUM_OPEN_CHAR = '[';
        private const char ALBUM_CLOSE_CHAR = ']';
        private const char MEDIA_FORMAT_CHAR = '@';

        public CollectionFoldersValidatorResult ValidateFolder(string data)
        {
            _data = data;

            CollectionFolderType collectionFolderType = GetCollectionFolderType();

            if (collectionFolderType == CollectionFolderType.None || collectionFolderType == CollectionFolderType.MaybeArtistOrAlbum)
                return new CollectionFoldersValidatorResult(collectionFolderType, "");


            CollectionFoldersValidatorResult result;
            result = FindForDuplicateControlChars();
            if (result.CollectionFolderType != CollectionFolderType.OK)
                return result;

            result = FindForDuplicateSpaces();
            if (result.CollectionFolderType != CollectionFolderType.OK)
                return result;

            result = FindForInitOrEndSpaces();
            if (result.CollectionFolderType != CollectionFolderType.OK)
                return result;


            if (result.CollectionFolderType == CollectionFolderType.Artist)
                result = ValidateArtistFolderRules();

            if (result.CollectionFolderType == CollectionFolderType.Album)
                result = ValidateAlbumFolderRules();

            return result;
        }

        private CollectionFoldersValidatorResult FindForDuplicateControlChars()
        {
            int count = CountCharOccurance(COUNTRY_OPEN_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{COUNTRY_OPEN_CHAR}' found");

            count = CountCharOccurance(COUNTRY_CLOSE_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{COUNTRY_CLOSE_CHAR}' found");

            count = CountCharOccurance(YEAR_OPEN_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{YEAR_OPEN_CHAR}' found");

            count = CountCharOccurance(YEAR_CLOSE_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{YEAR_CLOSE_CHAR}' found");

            count = CountCharOccurance(ALBUM_OPEN_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{ALBUM_OPEN_CHAR}' found");

            count = CountCharOccurance(ALBUM_CLOSE_CHAR);
            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{ALBUM_CLOSE_CHAR} found");

            count = CountCharOccurance(MEDIA_FORMAT_CHAR);
            if (count > 1)
            {
                int pos1 = _data.IndexOf(COUNTRY_OPEN_CHAR);
                int pos3 = _data.IndexOf(YEAR_OPEN_CHAR);
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"Duplicated '{MEDIA_FORMAT_CHAR}' found");
            }
            return new CollectionFoldersValidatorResult(CollectionFolderType.OK, "");
        }

        private CollectionFoldersValidatorResult FindForInitOrEndSpaces()
        {
            if (_data.Substring(0, 1) == " ")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Folder start with space");

            if (_data.Substring(_data.Length - 1, 1) == " ")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Folder end with space");

            return new CollectionFoldersValidatorResult(CollectionFolderType.OK, "");
        }

        private CollectionFoldersValidatorResult FindForDuplicateSpaces()
        {
            int count = 0;
            foreach (char chr in _data)
            {
                if (chr == ' ')
                    count++;
                else
                    count = 0;
            }

            if (count > 1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Duplcates spaces found");

            return new CollectionFoldersValidatorResult(CollectionFolderType.OK, "");
        }

        private CollectionFolderType GetCollectionFolderType()
        {
            int posCO = _data.IndexOf(COUNTRY_OPEN_CHAR);
            int posCC = _data.IndexOf(COUNTRY_CLOSE_CHAR);
            
            int posYO = _data.IndexOf(YEAR_OPEN_CHAR);
            int posYC = _data.IndexOf(YEAR_CLOSE_CHAR);

            int posAO = _data.IndexOf(ALBUM_OPEN_CHAR);
            int posAC = _data.IndexOf(ALBUM_CLOSE_CHAR);
            int posMF = _data.IndexOf(MEDIA_FORMAT_CHAR);

            bool maybeItIsArtistOrAlbum = (posCO > 0) || (posCC > 0) || (posYO > 0) || (posYC > 0) || (posAO > 0) || (posAC > 0) || (posMF > 0);

            bool isArtist = (posCO > 0) && (posCC > 0) && (posAO < 0) && (posAC < 0) && (posMF < 0);
            //bool isArtist = (posCO > 0) && (posCC > 0) && (posCC > posCO); //COUNTRY exists
            //isArtist = isArtist && (posAO < 0) && (posAC < 0);             //ALBUM not exists
            //isArtist = isArtist  && ((posMF < 0) || (posMF < posCO));     //MEDIA_FORMAT not exists or before country

            bool isAlbum = (posYO > 0) && (posYC > 0) && (posAO > 0) && (posAC > 0) && (posMF > 0);
            //bool isAlbum = (posYO > 0) && (posYC > 0) && (posYC > posYO);       //YEAR exists
            //isAlbum = isAlbum && (posAO > 0) && (posAC > 0) && (posAC > posAO); //ALBUM exists
            //isAlbum = isAlbum && (posMF > 0);                                   //MEDIA_FORMAT exits
            //isAlbum = isAlbum && (posAO > posYC);                               //YEAR < ALBUM rule
            //isAlbum = isAlbum && (posMF > posAC);                               //ALBUM < MEDIA_FORMAT rule

            if (isArtist)
                return CollectionFolderType.Artist;

            if (isAlbum)
                return CollectionFolderType.Album;

            if (maybeItIsArtistOrAlbum)
                return CollectionFolderType.MaybeArtistOrAlbum;

            return CollectionFolderType.None;
        }


        private CollectionFoldersValidatorResult ValidateArtistFolderRules()
        {
            //required formats
            string str = " " +  COUNTRY_OPEN_CHAR;
            int pos1 = _data.IndexOf(str);
            if (pos1 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{COUNTRY_OPEN_CHAR}' not found");

            //controls sequence
            int pos2 = _data.IndexOf(COUNTRY_CLOSE_CHAR);
            if (pos2 < pos1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"'{COUNTRY_CLOSE_CHAR}' before '{COUNTRY_OPEN_CHAR}'");

            //invalid formats
            str = COUNTRY_OPEN_CHAR + " ";
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{COUNTRY_OPEN_CHAR}' found");

            //contents
            char[] chrs = { COUNTRY_OPEN_CHAR, COUNTRY_CLOSE_CHAR };
            string[] words = _data.Split(chrs);

            if (words[0].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Artist name is empty");

            if (words[1].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Country name is empty");

            return new CollectionFoldersValidatorResult(CollectionFolderType.OK, "");
        }


        private CollectionFoldersValidatorResult ValidateAlbumFolderRules()
        {
            //required formats
            string str = " " + YEAR_OPEN_CHAR;
            int pos1 = _data.IndexOf(str);
            if (pos1 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{YEAR_OPEN_CHAR}' not found");

            str = YEAR_CLOSE_CHAR + " ";
            int pos2 = _data.IndexOf(str);
            if (pos2 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{YEAR_CLOSE_CHAR}' not found");

            str = " " + ALBUM_OPEN_CHAR;
            int pos3 = _data.IndexOf(str);
            if (pos3 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{ALBUM_OPEN_CHAR}' not found");

            str = ALBUM_CLOSE_CHAR + " ";
            int pos4 = _data.IndexOf(str);
            if (pos4 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{ALBUM_CLOSE_CHAR}' not found");

            str = " " + MEDIA_FORMAT_CHAR;
            int pos5 = _data.IndexOf(str);
            if (pos5 < 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{MEDIA_FORMAT_CHAR}' not found");


            // conctrols sequences

            if (pos2 < pos1)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"'{YEAR_CLOSE_CHAR}' before '{YEAR_OPEN_CHAR}'");

            if (pos4 < pos3)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"'{ALBUM_CLOSE_CHAR}' before '{ALBUM_OPEN_CHAR}'");

            if (pos5 < pos4)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"'{MEDIA_FORMAT_CHAR}' before '{ALBUM_CLOSE_CHAR}'");

            if (pos3 < pos2)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"'{ALBUM_OPEN_CHAR}' before '{YEAR_CLOSE_CHAR}'");

            //invalid formats

            str = YEAR_OPEN_CHAR + " ";
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{YEAR_OPEN_CHAR}' found");

            str = " " + YEAR_CLOSE_CHAR;
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{YEAR_CLOSE_CHAR}' found");

            str = ALBUM_OPEN_CHAR + " ";
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{ALBUM_OPEN_CHAR}' found");

            str = " " + ALBUM_CLOSE_CHAR;
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space before '{ALBUM_CLOSE_CHAR}' found");
           
            str =  MEDIA_FORMAT_CHAR + " " ;
            pos1 = _data.IndexOf(str);
            if (pos1 > 0)
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, $"One space after '{MEDIA_FORMAT_CHAR}' found");

            //contents

            char[] chrs = { YEAR_OPEN_CHAR, YEAR_CLOSE_CHAR, ALBUM_OPEN_CHAR, ALBUM_CLOSE_CHAR, MEDIA_FORMAT_CHAR };
            string[] words = _data.Split(chrs);

            if (words[0].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Artist name is empty");

            if (words[1].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Year is empty");

            if (words[3].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "Album name is empty");

            if (words[5].Trim() == "")
                return new CollectionFoldersValidatorResult(CollectionFolderType.IncorrectFormat, "@File media type is empty");

            return new CollectionFoldersValidatorResult(CollectionFolderType.OK, "");
        }

        private int CountCharOccurance(char chr)
        {
            int count = 0;
            foreach (char c in _data)
            {
                if (c == chr)
                    count++;
            }

            return count;
        }

        private int CountDuplicateSpaces()
        {
            int count = 0;
            foreach (char c in _data)
            {
                if (c == ' ')
                    count++;
                else
                    count = 0;
            }

            return count;
        }

    }
}

using MusicCollectionContext;
using Serilog;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;

namespace MusicCollectionList
{
    public class LinuxShellHelper2
    {
        private string _rootPath;
        private string _fullFileNameOut;
        private StreamWriter _streamWriter;

    public void TreeProcess(CollectionOriginType collectionOriginType, FileSystemContextFilter contextFilter, bool useLinearOutputFormat)
        {
            try
            {
                Log.Information("'LinuxShellHelper.TreeProcess' - Started...");

                string rootPath;
                string fullFileNameOut;
                string fullFileNameTemp;

                //output files
                if (collectionOriginType == CollectionOriginType.Loss)
                {
                    rootPath = Utils.AppendDirectorySeparator(Constants.FolderRootCollectionLoss);
                    fullFileNameOut = System.IO.Path.Join(rootPath, Constants.TreeTextFileNameCollectionLoss);
                    fullFileNameTemp = System.IO.Path.Join(rootPath, Constants.TreeTempFileNameCollectionLoss);
                }
                else
                {
                    rootPath = Utils.AppendDirectorySeparator(Constants.FolderRootCollectionLossLess);
                    fullFileNameOut = System.IO.Path.Join(rootPath, Constants.TreeTextFileNameCollectionLossLess);
                    fullFileNameTemp = System.IO.Path.Join(rootPath, Constants.TreeTempFileNameCollectionLossLess);
                }

                if (useLinearOutputFormat)
                    fullFileNameTemp = fullFileNameOut;

                //TODO: Extensions filter

                string bashCommand = $"ls -a -R -p {rootPath}";
                //startInfo.Arguments = $"-c \"ls -a -R -p\"";
                //startInfo.Arguments = $"-c \"ls -lha -R\"";
                
                //process 
                bool resultOk = LinuxBashProcess(bashCommand, fullFileNameTemp);

                if (resultOk && (!useLinearOutputFormat))
                    ChangeOutputToLinearFormat(fullFileNameTemp, fullFileNameOut, contextFilter);

            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
                Log.Error(_fullFileNameOut);
            }
            finally
            {
                _streamWriter.Flush();
                _streamWriter.Close();
                _streamWriter.Dispose();
            }

            Log.Information("'MsDosShellHelper.TreeProcess' - Finished...");
        }

        private bool LinuxBashProcess(string bashCommand, string fullFileNameOut)
        {
            bool retValue = true;

            try
            {
                //output
                _streamWriter = new StreamWriter(fullFileNameOut, false, Constants.StreamsEncoding);

                //Process Info
                System.Diagnostics.ProcessStartInfo startInfo = new();
                startInfo.FileName = "/bin/bash";
                startInfo.Arguments = $"-c \"{bashCommand}\"";

                //dos without window
                //startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                //startInfo.UseShellExecute = false;
                //startInfo.CreateNoWindow = false;

                //output to files
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;

                //Process
                System.Diagnostics.Process process = new();
                process.StartInfo = startInfo;

                //V1
                process.OutputDataReceived += OutputDataReceived;
                process.ErrorDataReceived += ErrorDataReceived;

                //V2
                //process.OutputDataReceived += (sender, args) =>
                //{
                //    _streamWriter.WriteLine(args.Data);
                //    _streamWriter.Flush();
                //};

                //process.OutputDataReceived += (sender, args) =>
                //{
                //    _streamWriter.WriteLine("ERROR:" + args.Data);
                //    _streamWriter.Flush();
                //};

                //Start
                process.Start();
                process.BeginOutputReadLine(); //important to file output 
                process.WaitForExit();
            }
            catch (Exception ex)
            {
                Log.Error($"Command:{bashCommand}");
                Log.Error($"Outout:{fullFileNameOut}");
                Log.Error($"Message Error:{ex.Message}");
                retValue = false;
            }
            finally
            {
                if (_streamWriter != null)
                {
                    _streamWriter.Flush();
                    _streamWriter.Close();
                    _streamWriter.Dispose();
                }
            }

            return retValue;
        }

        private void ErrorDataReceived(object sender, DataReceivedEventArgs e)
        {
            _streamWriter.WriteLine("ERROR:" + e.Data);
            _streamWriter.Flush();
        }

        private void OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            _streamWriter.WriteLine(e.Data);
            _streamWriter.Flush();
        }


        /// <summary>
        /// set output like linear fprmat: "dir /B"
        /// lines example: 
        /// C:\_COLLECTION\C\Camel {United Kingdom}\Studio\Camel {1973} [Camel] @MP3
        /// C:\_COLLECTION\C\Camel {United Kingdom}\Studio\Camel {1973} [Camel] @MP3\01. Slow Yourself Down.mp3
        /// </summary>
        /// <param name="contextFilter"></param>
        private void ChangeOutputToLinearFormat(string fullFileNameTemp, string fullFileNameOut, FileSystemContextFilter contextFilter)
        {
            if (!File.Exists(fullFileNameTemp))
                return;

            StreamReader reader = null;
            StreamWriter writer = null;
            int count = 0;
            string line = "";

            try
            {
                reader = new StreamReader(fullFileNameTemp, Constants.StreamsEncoding);
                writer = new StreamWriter(fullFileNameOut, false, Constants.StreamsEncoding);

                bool isFolder = false;
                string baseDir = "";
                string member;

                while ((line = reader.ReadLine()) != null)
                {
                    if (line.Length < 14)
                        continue;


                    if (line.Substring(0, 14) == " Directory of ")
                    {
                        baseDir = line.Substring(14);
                        continue;
                    }

                    if (line.Length < 37)
                        continue;

                    if (!DateTime.TryParse(line.Substring(0, 10), out DateTime dt))
                        continue;

                    isFolder = (line.Substring(21, 5) == "<DIR>");

                    member = line.Substring(36);

                    if (isFolder && (member == ".") || (member == ".."))
                        continue;

                    //

                    if (isFolder)
                    {
                        if (contextFilter == FileSystemContextFilter.FilesOnly)
                            continue;
                    }
                    else
                    {
                        if (contextFilter == FileSystemContextFilter.DirectoriesOnly)
                            continue;
                    }

                    writer.WriteLine($"{baseDir}{Path.DirectorySeparatorChar}{member}");
                    writer.Flush();
                }

                Log.Information(count.ToString());

            }
            catch (Exception ex)
            {
                Log.Error($"Line:{line}");
                Log.Error($"Outout:{fullFileNameOut}");
                Log.Error($"Message Error:{ex.Message}");
            }
            finally
            {
                if (reader != null)
                {
                    reader.Close();
                    reader.Dispose();
                }
                if (writer != null)
                {
                    writer.Flush();
                    writer.Close();
                    writer.Dispose();
                }
            }
        }
    }
}

//private void RunIt_LS_Ra(CollectionOriginType collectionOriginType, FileSystemContextFilter contextFilter)
//{
//    string rootPath;
//    string fileNameError;
//    string _fullFileNameIn = @"E:\_MEGA_DRIVE\__GitHub\__Synchronized\C_Sharp\MusicCollectionList\aa.txt";
//    string _fullFileNameOut = @"E:\_MEGA_DRIVE\__GitHub\__Synchronized\C_Sharp\MusicCollectionList\\zz.out"; ;

//    if (collectionOriginType == CollectionOriginType.Loss)
//    {
//        //rootPath = ""E:\_MEGA_DRIVE\__GitHub\__Synchronized\C_Sharp\MusicCollectionList\New folder";
//        //fileNameError = System.IO.Path.Join(rootPath, Constants.FileErrorsLoss);
//        //_fullFileNameOut = System.IO.Path.Join(_rootPath, Constants.TreeTextFileNameCollectionLoss);
//    }
//    else
//    {
//        //rootPath = Constants.FolderRootCollectionLossLess;
//        //fileNameError = System.IO.Path.Join(rootPath, Constants.FileErrorsLossLess);
//    }

//    if (!File.Exists(_fullFileNameIn))
//        return;

//    //            Log.Information(fileNameError);

//    StreamReader reader = null;
//    StreamWriter writer = null;
//    int count = 0;
//    string line = "";

//    try
//    {
//        reader = new StreamReader(_fullFileNameIn, Constants.StreamsEncoding);
//        writer = new StreamWriter(_fullFileNameOut, false, Constants.StreamsEncoding);

//        bool isNewFolder = true;
//        bool isFolder = false;
//        string baseDir = "";

//        while ((line = reader.ReadLine()) != null)
//        {
//            if (line == "")
//            {
//                isNewFolder = true;
//                continue;
//            }

//            if ((line == "./") || (line == "../"))
//                continue;

//            if (isNewFolder)
//            {
//                if (line.EndsWith(':'))
//                {
//                    baseDir = line.Substring(0, line.Length - 1);
//                    isNewFolder = false;
//                }
//                continue;
//            }

//            isFolder = (line.EndsWith('/'));
//            if (isFolder)
//            {
//                if ((contextFilter == FileSystemContextFilter.All) || (contextFilter == FileSystemContextFilter.DirectoriesOnly))
//                {
//                    writer.WriteLine(baseDir + "/" + line);
//                    writer.Flush();
//                    continue;
//                }
//            }
//            else
//            {
//                if ((contextFilter == FileSystemContextFilter.All) || (contextFilter == FileSystemContextFilter.FilesOnly))
//                {
//                    writer.WriteLine(baseDir + "/" + line);
//                    writer.Flush();
//                    continue;
//                }
//            }
//        }

//        Log.Information(count.ToString());

//    }
//    catch (Exception ex)
//    {
//        Log.Error($"Folder:[{line}] -Error:[{ex.Message}");

//    }
//    finally
//    {
//        if (reader != null)
//        {
//            reader.Close();
//            reader.Dispose();
//        }
//        if (writer != null)
//        {
//            writer.Flush();
//            writer.Close();
//            writer.Dispose();
//        }
//    }
